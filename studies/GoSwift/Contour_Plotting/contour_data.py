import numpy as np
import math as ma

""" The data_import function is meant to allow the user of the contour module
to calculate data however the user would like and return it in the correct form
for use in the contour module.

Parameters
------------------------------------------------------------------------
N: number of data points per axis. i.e. N=100 gives 100 x 100 grid
xl: lower bound of x-axis data
xu: upper bound of x-axis data
yl: lower bound of y-axis data
yu: upper bound of y-axis data

Returns
------------------------------------------------------------------------
A: 1-D array of length N containing x-axis values
B: 1-D array of length N containing y-axis values
C: 1-D array of 2-D arrays containing z-axis values for each x-y pair for each
   data series. size of each 2-D array: NxN size of C: number of desired data
   series. Note: The order of the data series in the array C should match the
   order of the data series formatting in the input file to the contour module.
"""

def data_import(N,xl,xu,yl,yu):

    # Calculate Data here
    A=np.array([50.0,52.0,54.0,56.0,58.0,60.00,62.00,64.00,66.00,68.00,70.00,72.00,74.00,76.00,78.00,80.00,82.,84.,86.,88.,90.,92.,94.,96.,98.,100.])
    B=np.array([-0.333333333,-0.3,-0.275,-0.25,-0.225,-0.2,-0.175,-0.15,-0.125,-0.1,-0.075,-0.05,-0.025,0])
    C1=np.array([[2070.,
2484.564995,
2411.022914,
2344.747735,
2284.893733,
2230.742811,
2181.681626,
2137.18342,
2096.793468,
2060.117333,
2026.811335,
1996.57474,
1969.143341,
1944.284142,
1921.790925,
1901.480551,
1883.189838,
1866.772932,
1852.09907,
1839.050678,
1827.521742,
1817.416409,
1808.647786,
1801.136898,
1794.811792,
1789.606746],[1648.135811,
2438.892128,
2368.355298,
2304.86266,
2247.596713,
2195.863253,
2149.069266,
2106.705382,
2068.331815,
2033.567023,
2002.078491,
1973.575196,
1947.801396,
1924.531502,
1903.565791,
1884.726834,
1867.856481,
1852.81332,
1839.470519,
1827.713987,
1817.440806,
1808.557877,
1800.980766,
1794.632694,
1789.443676,
1785.34976],[1641.570675,
2407.591984,
2339.143452,
2277.586279,
2222.122418,
2172.074126,
2126.862403,
2085.989866,
2049.027031,
2015.601245,
1985.3877,
1958.102073,
1933.49447,
1911.344415,
1891.456677,
1873.657774,
1857.793039,
1843.724137,
1831.326962,
1820.489842,
1811.112009,
1803.102285,
1796.377945,
1790.863748,
1786.491084,
1783.197245],[1634.399201,
2378.913164,
2312.406554,
2252.651056,
2198.866554,
2150.390486,
2106.656772,
2067.179081,
2031.537429,
1999.367368,
1970.351199,
1944.21078,
1920.701615,
1899.607954,
1880.73871,
1863.924052,
1849.012532,
1835.868663,
1824.370859,
1814.409693,
1805.886391,
1798.711553,
1792.80405,
1788.090069,
1784.502285,
1781.979149],[1628.160852,
2352.933648,
2288.2187,
2230.127569,
2177.896512,
2130.876827,
2088.514229,
2050.332484,
2015.920285,
1984.920675,
1957.02245,
1931.953119,
1909.473117,
1889.37101,
1871.459504,
1855.572104,
1841.560307,
1829.291232,
1818.645604,
1809.516049,
1801.805622,
1795.426561,
1790.299199,
1786.351038,
1783.515938,
1781.733421],[1622.902169,
2329.728715,
2266.651414,
2210.083946,
2159.277344,
2113.595411,
2072.494511,
2035.507514,
2002.230949,
1972.314618,
1945.453178,
1921.379238,
1899.857684,
1880.680979,
1863.66525,
1848.647016,
1835.480433,
1824.034972,
1814.193449,
1805.850343,
1798.910369,
1793.287243,
1788.902626,
1785.685215,
1783.569948,
1782.497319],[1618.66931,
2309.370115,
2247.772886,
2192.585165,
2143.071125,
2098.605689,
2058.654685,
2022.759086,
1990.522381,
1961.600384,
1935.692962,
1912.537255,
1891.902106,
1873.583439,
1857.400422,
1843.19225,
1830.815442,
1820.141561,
1811.055277,
1803.452722,
1797.240084,
1792.332397,
1788.652506,
1786.130173,
1784.7013,
1784.307255],[1615.507818,
2291.925228,
2231.6472,
2177.692344,
2129.336297,
2085.963684,
2047.048598,
2012.139075,
1980.844676,
1952.82646,
1927.788832,
1905.472883,
1885.650901,
1868.121825,
1852.70747,
1839.24936,
1827.60607,
1817.65098,
1809.270378,
1802.361831,
1796.83281,
1792.599498,
1789.585773,
1787.722327,
1786.945906,
1787.198643],[1613.462371,
2277.456224,
2218.333569,
2165.462034,
2118.127019,
2075.72141,
2037.726327,
2003.695818,
1973.244607,
1946.038206,
1921.78488,
1900.22907,
1881.145986,
1864.337124,
1849.62654,
1836.857728,
1825.891004,
1816.601286,
1808.876226,
1802.614608,
1797.724986,
1794.124516,
1791.737951,
1790.496773,
1790.338444,
1791.205751],[1612.576546,
2266.019258,
2207.88559,
2155.945548,
2109.492558,
2067.926298,
2030.733664,
1997.473637,
1967.765179,
1941.277454,
1917.721883,
1896.845651,
1878.426354,
1862.267573,
1848.195191,
1836.054306,
1825.706647,
1817.028384,
1809.908275,
1804.24609,
1799.951264,
1796.941742,
1795.14299,
1794.487133,
1794.912217,
1796.361566],[1612.89256,
2257.663718,
2200.350568,
2149.188333,
2103.476711,
2062.620679,
2026.111632,
1993.512399,
1964.445232,
1938.58213,
1915.636963,
1895.359034,
1877.527781,
1861.948391,
1848.448147,
1836.87338,
1827.086898,
1818.965824,
1812.399762,
1807.289232,
1803.54434,
1801.083633,
1799.833118,
1799.725413,
1800.699015,
1802.697659],[1614.45104,
2252.431562,
2195.768903,
2145.229421,
2100.117302,
2059.841314,
2023.896067,
1991.847123,
1963.319075,
1937.985929,
1915.563278,
1895.801915,
1878.482565,
1863.411532,
1850.417072,
1839.346362,
1830.062952,
1822.444619,
1816.38154,
1811.774748,
1808.534802,
1806.580661,
1805.838699,
1806.241874,
1807.72899,
1810.244071],[1617.290788,
2250.356763,
2194.17359,
2144.100961,
2099.445757,
2059.619014,
2024.117253,
1992.507656,
1964.416192,
1939.518031,
1917.529767,
1898.20304,
1881.319305,
1866.685486,
1854.130376,
1843.50161,
1834.66314,
1827.493086,
1821.88193,
1817.730969,
1814.951,
1813.461195,
1813.188122,
1814.064917,
1816.030551,
1819.029207],[1621.448559,
2251.464883,
2195.589827,
2145.827869,
2101.486782,
2061.978335,
2026.799656,
1995.51842,
1967.760999,
1943.202891,
1921.560949,
1902.587022,
1886.062726,
1871.79511,
1859.613062,
1849.364287,
1840.912788,
1834.136722,
1828.926597,
1825.18373,
1822.818935,
1821.751395,
1821.907696,
1823.220989,
1825.630271,
1829.07975]])



    # Example Data
    # ~ A=np.linspace(xl, xu, N)
    # ~ B=np.linspace(yl, yu, N)

    # ~ C1=np.zeros((N, N), dtype=np.float64)
    # ~ C2=np.zeros((N, N), dtype=np.float64)
    # ~ for i in range(0, N):
        # ~ for j in range(0, N):
            # ~ C1[i, j] = A[i]*B[j]
            # ~ C2[i, j] = A[i]**2*B[j]

    C=[C1]#, C2]

    return A,B,C # where C=[C1, C2, C3, etc...]


