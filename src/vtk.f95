! Subroutines for I/O with VTK files
module vtk_mod

    use base_panel_mod
    use tri_panel_mod
    use quad_panel_mod
    use vertex_mod

    implicit none

    
contains

    subroutine load_surface_vtk(mesh_file, N_verts, N_panels, vertices, panels)

        implicit none

        character(len=:),allocatable,intent(in) :: mesh_file
        integer,intent(out) :: N_verts, N_panels
        character(len=200) :: dummy_read
        type(vertex),dimension(:),allocatable,intent(inout) :: vertices
        type(panel_pointer),dimension(:),allocatable,intent(inout) :: panels
        type(tri_panel),pointer :: dummy_tri
        type(quad_panel),pointer :: dummy_quad
        integer :: i, N, i1, i2, i3, i4

        ! Open file
        open(1, file=mesh_file)

            ! Determine number of vertices
            read(1,*) ! Header
            read(1,*) ! Header
            read(1,*) ! Header
            read(1,*) ! Header
            read(1,*) dummy_read, N_verts, dummy_read

            ! Allocate vertex array
            allocate(vertices(N_verts))

            ! Store vertices
            do i=1,N_verts
                read(1,*) vertices(i)%loc(1), vertices(i)%loc(2), vertices(i)%loc(3)
                vertices(i)%index = i
            end do

            ! Determine number of panels
            read(1,*) dummy_read, N_panels, dummy_read

            ! Allocate panel array
            allocate(panels(N_panels))

            ! Initialize panels
            do i=1,N_panels

                ! Get data
                read(1,'(a)') dummy_read
                
                ! Determine size of panel
                if (dummy_read(1:2) == '3 ') then
                    read(dummy_read,*) N, i1, i2, i3
                else if (dummy_read(1:2) == '4 ') then
                    read(dummy_read,*) N, i1, i2, i3, i4
                else
                    write(*,*) "MFTran supports only trigonal and quadrilateral panels."
                    stop
                end if

                ! Initialize trigonal panel
                if (N == 3) then
                    allocate(dummy_tri)
                    call dummy_tri%init(vertices(i1+1), vertices(i2+1), vertices(i3+1)) ! Need +1 because VTK is 0-indexed
                    panels(i)%ptr => dummy_tri

                ! Initialize quadrilateral panel
                else
                    allocate(dummy_quad)
                    call dummy_quad%init(vertices(i1+1), vertices(i2+1), vertices(i3+1), vertices(i4+1))
                    panels(i)%ptr => dummy_quad
                end if

            end do

        close(1)
    
    end subroutine load_surface_vtk


    subroutine write_surface_vtk(output_file, vertices, panels)

        implicit none

        character(len=:),allocatable,intent(in) :: output_file
        type(vertex),dimension(:),intent(in) :: vertices
        type(panel_pointer),dimension(:),intent(in) :: panels
        integer :: i, N_verts, N_panels, panel_info_size, j

        ! Open file
        open(1, file=output_file)

            ! Write header
            write(1,'(a)') "# vtk DataFile Version 3.0"
            write(1,'(a)') "MFTran results file. Generated by MFTran, USU AeroLab (c) 2021."
            write(1,'(a)') "ASCII"

            ! Write vertex information
            N_verts = size(vertices)
            write(1,'(a)') "DATASET POLYDATA"
            write(1,'(a i20 a)') "POINTS", N_verts, " float"

            ! Write out vertices
            100 format(f20.12, ' ', f20.12, ' ', f20.12) ! Vertices
            do i=1,N_verts
                write(1,100) vertices(i)%loc(1), vertices(i)%loc(2), vertices(i)%loc(3)
            end do

            ! Determine panel info size
            panel_info_size = 0
            N_panels = size(panels)
            do i=1,N_panels
                panel_info_size = panel_info_size + panels(i)%ptr%N + 1
            end do
            
            ! Write out panels
            write(1,'(a i20 i20)') "POLYGONS", N_panels, panel_info_size
            do i=1,N_panels

                ! Number of vertices
                write(1,'(i1) ',advance='no') panels(i)%ptr%N

                ! Indices of each vertex
                do j=1,panels(i)%ptr%N
                    write(1,'(i20) ',advance='no') panels(i)%ptr%vertices(j)%ptr%index-1
                end do
                write(1,*)

            end do

        close(1)
        
    
    end subroutine write_surface_vtk

    
end module vtk_mod